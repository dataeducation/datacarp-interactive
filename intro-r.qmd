---
title: "Expressions, Types, Variables, and Errors"
editor: visual
format:
  html:
    include-in-header: header.html
filters:
  - webr
---

```{r}
```

### Basic expressions

* Kangaroo rat weight (g -> lb)

```{webr}
50 / 1000 * 2.2
```

* This is called an expression
* A set of commands that returns a value

* Run line
* Run selection
* `Source` & `Source with Echo`

* Save as `krat_weight_analysis.R`
* Can see in the `Files` tab that we've created this file 
* We can also use this tab to create, delete, and rename files & folders

### Variables

* To save the values we calculate for later use we use variables 
* A variable is a name that has a value associated with it
    * Assign using `<-` or `=`

```{webr}
weight_g <- 50
weight_g = 50
```

* We can see that this variable has been created by looking in the Environment tab

* It works just like the value itself

```{webr}
weight_g / 1000
weight_g / 1000 * 2.2
weight_lb <- weight_g / 1000 * 2.2
```

* It won't change unless you assign a new value to it directly

```{webr}
weight_g
weight_g * 2
weight_g
weight_g <- 26
weight_g
```

### Comments

* Remember what code is doing
* For humans, not computers
* Use the `#`

```{webr}
# Calculate weight of Kangaroo Rat in pounds
```

### Assignments format

* Comment before each problem and each sub-problem
* Make sure result prints out on `Source with echo`

```{webr}
# Problem 1

# 1.1
2 + 2

# 1.2
2 - 8

# Problem 2

width = 2
height = 3
length = 1.5
volume = width * height * length
volume
```

> Create assignment script, put in new folder

* Now we're going to work on some exercises to get a feel for this
* In class we will often only do part of an exercise and save the rest for later

> Do [Exercise 1.1-1.3 - Basic Expressions]({{ site.baseurl }}/exercises/Expressions-and-variables-basic-expressions-R/)

> Do [Exercise 2 - Basic Variables]({{ site.baseurl }}/exercises/Expressions-and-variables-basic-variables-R/)


### Functions

* A function is a complicated expression.
* Command that returns a value

```{webr}
sqrt(49)
```

* A function call is composed of two parts.
    * Name of the function
    * Arguments that the function requires to calculate the value it returns.
    * `sqrt()` is the name of the function, and `49` is the argument.
* We can also pass variables as the argument

```{webr}
weight_lb <- 0.11
sqrt(weight_lb)
```

* Another function that we'll use a lot is `str()`
* All values and therefore all variables have types
* `str`, short for "structure", lets us look at them

```{webr}
str(weight_lb)
```

* Another data type is for text data
* We right text inside of quotation makes

```{webr}
"hello world"
```

* If we look at the structure of some text we see that it is type character

```{webr}
str("hello world")
```

* Functions can take multiple arguments.
    * Round `weight_lb` to one decimal place
    * Typing `round()` shows there are two arguments
    * Number to be rounded and number of digits

```{webr}
round(weight_lb, 1)
```

* Functions return values, so as with other values and expressions, if we don't save the output of a function then there is no way to access it later
* It is common to forget this when dealing with functions and expect the
  function to have changed the value of the variable
* But looking at `weight_lb` we see that it hasn't been rounded

```{webr}
weight_lb
```

* To save the output of a function we assign it to a variable.

```{webr}
weight_rounded <- round(weight_lb, 1)
weight_rounded
```


> Do [Exercise 4.1-4.3 - Built-in Functions]({{ site.baseurl }}/exercises/Functions-built-in-functions-R/)